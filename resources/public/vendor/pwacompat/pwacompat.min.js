(function j(h, d, e) {
  function f(a, b) {
    if (!d[a]) {
      if (!h[a]) {
        var g = "function" == typeof require && require;
        if (!b && g) {
          return g(a, !0);
        }
        if (c) {
          return c(a, !0);
        }
        g = Error("Cannot find module '" + a + "'");
        throw g.code = "MODULE_NOT_FOUND", g;
      }
      g = d[a] = {b:{}};
      h[a][0].call(g.b, function(b) {
        var c = h[a][1][b];
        return f(c ? c : b);
      }, g, g.b, j, h, d, e);
    }
    return d[a].b;
  }
  for (var c = "function" == typeof require && require, b = 0;b < e.length;b++) {
    f(e[b]);
  }
  return f;
})({1:[function(i, h) {
  h.b = function(d) {
    function e(a, b) {
      b && f.push({name:"meta", a:{name:a, content:!0 === b ? "yes" : b}});
    }
    var f = [], c = -1 !== ["standalone", "fullscreen"].indexOf(d.display);
    e("apple-mobile-web-app-capable", c);
    e("mobile-web-app-capable", c);
    e("apple-mobile-web-app-title", d.short_name || d.name);
    e("msapplication-starturl", d.start_url || "/");
    e("msapplication-TileColor", d.theme_color);
    var b;
    (d.related_applications || []).filter(function(a) {
      return "itunes" == a.platform;
    }).forEach(function(a) {
      a.id ? b = a.id : (a = a.url.match(/id(\d+)/)) && (b = a[1]);
    });
    b && e("apple-itunes-app", "app-id\x3d" + b);
    d = d.icons || [];
    d.sort(function(a, b) {
      return parseInt(b.sizes, 10) - parseInt(a.sizes, 10);
    });
    d.forEach(function(a) {
      f.push({name:"link", a:{rel:"icon", href:a.src, sizes:a.sizes}});
      f.push({name:"link", a:{rel:"apple-touch-icon", href:a.src, sizes:a.sizes}});
    });
    return f;
  };
}, {}], 2:[function(i) {
  (function() {
    function h(c) {
      if (navigator.standalone) {
        var b;
        try {
          b = JSON.parse(window.localStorage["pwacompat.js"]);
        } catch (d) {
        }
        if (b) {
          c(b);
          return;
        }
      }
      var a = new XMLHttpRequest;
      a.onload = function() {
        var b = JSON.parse(a.responseText);
        try {
          window.localStorage["pwacompat.js"] = a.responseText;
        } catch (d) {
        }
        c(b);
      };
      a.open("GET", f.href);
      a.send();
    }
    function d(c) {
      i("./lib")(c).forEach(function(b) {
        var a = document.createElement(b.name), c;
        for (c in b.a) {
          a.setAttribute(c, b.a[c]);
        }
        document.head.appendChild(a);
      });
      navigator.standalone && e(c);
    }
    function e(c) {
      document.addEventListener("click", function(a) {
        "A" === a.target.tagName && ((new URL(a.target.href)).origin !== location.origin ? window.localStorage["pwacompat.js:out"] = location.href : (a.preventDefault(), window.location = a.target.href));
      });
      if (window.sessionStorage && !window.sessionStorage.loaded) {
        window.sessionStorage.loaded = !0;
        c = window.localStorage["pwacompat.js:out"] || c.start_url;
        delete window.localStorage["pwacompat.js:out"];
        var b = window.location.href + window.location.search;
        c && c != b && (c.replace(/#.*$/, "") == b ? window.location.hash = c.substr(c.indexOf("#")) : window.location = c);
      }
    }
    if (!navigator.serviceWorker && window.localStorage) {
      var f = document.head.querySelector('link[rel\x3d"manifest"]');
      f && f.href ? h(d) : console.warn('pwacompat.js can\'t operate: no \x3clink rel\x3d"manifest" ... /\x3e found');
    }
  })();
}, {"./lib":1}]}, {}, [2]);
